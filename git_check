#!/bin/bash
#
# Checks the git status of the list of git repositories
#
#
cd /Users/woo/bin
nonWeb=/Users/woo/Development/
SERVER=jwooten37830.com
host=$(hostname)
home=${HOME}
declare -a gitrepos
while read line; do
#   echo $line
   gitrepos+=($line)
done < ~/bin/git_repositories.txt

#echo ${#gitrepos[@]}
for d in "${gitrepos[@]}"; do
    br=$(git rev-parse --abbrev-ref HEAD)
    reponame="`basename $d`"
    export reponame
    dir=$(dirname $d)
    if [ -d $d ]; then
        cd $d
    else
#        echo " $reponame --> Not a directory at $d"
        continue
    fi
    if [  -e $d/.git ]; then

    ok=true
    if [ ! -z "`git diff  2> /dev/null`" ]; then
        echo " $reponame [$br] --> Out of sync with origin/HEAD at $d"
        ok=false
    fi
    if [ ! -z "`git ls-files --other --exclude-standard 2> /dev/null`" ]; then
        echo " $reponame [$br] --> Untracked files present at $d"
        ok=false
    fi
    if [ ! -z "`git diff --cached --shortstat 2> /dev/null`" ]; then
        echo " $reponame [$br] --> Changes to be committed at $d"
        ok=false
    fi
    if [ ! -z "`git diff --shortstat 2> /dev/null`" ]; then
        echo " $reponame [$br] --> Changes to be staged/committed at $d"
        ok=false
    fi
    isInSync=`git remote update>/dev/null; git status -uno | grep -o "is up to date"`
    if [ $? -ne 0  ]; then
        echo " $reponame [$br] --> Out of sync with remote at $d"
        ok=false
    fi
       # git branch -v gives ahead/behind info
    # using perl - sorry for this
#    MOD=`git branch -v | perl -wlne '/^..(\S+)\s+([a-f0-9]+)\s+([\[ahead\s+\d+\]|\[behind\s+\d+\]])/ or next; print "# Branch $1, $2, $3"; '`;
    MOD=`git branch -v | perl -wlne '/^..(\S+)\s+([a-f0-9]+)\s+(\[ahead\s+\d+\]|\[behind\s+\d+\])/ or next; print  "$3 --> $ENV{reponame} [$1] $2"; '`;
#    echo $MOD  | tr -d '\040\011\012\015'


    # print summary

    git status | grep -q '^# Changes' && MOD="$MOD #Uncommitted changes present"
    [ ! -z "$MOD" ] &&  MOD="$MOD" | ok=false
    if $ok; then
        echo " OK --> $reponame [$br]"
    else
       # a series of UGLY HACKs to get pretty-printing
       MOD=`echo "$MOD" | tr -d '\011\012\015' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'` | sed -e 's/]#/]\
 #/'
       if [ ! -z "$MOD" ]; then
          echo -e " $MOD" && continue
       fi
    fi
 else
    echo " $reponame --> Not a git repository at $d"
 fi
done
